/*-------------------------------------------------------------------------------
* Copyright (c) 2020 THALES GLOBAL SERVICES.
*  
*  This program and the accompanying materials are made available under the
*   terms of the Eclipse Public License 2.0 which is available at
*   http://www.eclipse.org/legal/epl-2.0
*   
*   SPDX-License-Identifier: EPL-2.0
*   
*   Contributors:
*      Thales - initial API and implementation
*-------------------------------------------------------------------------------*/
/*
 * generated by Xtext 2.18.0.M3
 */
package org.polarsys.capella.scenario.editor.dslscenario.ui.quickfix

import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider
import org.eclipse.xtext.ui.editor.quickfix.Fix
import org.polarsys.capella.scenario.editor.dslscenario.validation.DslValidator
import org.eclipse.xtext.validation.Issue
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor

/**
 * Custom quickfixes.
 *
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#quick-fixes
 */
class DslQuickfixProvider extends DefaultQuickfixProvider {

	@Fix(DslValidator.INVALID_NAME)
	def capitalizeName(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 'Create element (todo)', 'Choose an id', 'upcase.png') [
			context |
			val xtextDocument = context.xtextDocument
			val firstLetter = xtextDocument.get(issue.offset, 1)
			xtextDocument.replace(issue.offset, 1, firstLetter)
		]
	}

	@Fix(DslValidator.DUPILCATED_NAME)
	def duplicatedName(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 'Duplicated name (todo)', 'Choose an id', 'upcase.png') [
			context |
			val xtextDocument = context.xtextDocument
			val firstLetter = xtextDocument.get(issue.offset, 1)
			xtextDocument.replace(issue.offset, 1, firstLetter)
		]
	}
}
