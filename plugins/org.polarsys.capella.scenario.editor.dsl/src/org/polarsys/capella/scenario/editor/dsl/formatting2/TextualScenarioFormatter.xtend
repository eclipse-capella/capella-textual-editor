/*
 * generated by Xtext 2.18.0.M3
 */
package org.polarsys.capella.scenario.editor.dsl.formatting2

import com.google.inject.Inject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.polarsys.capella.scenario.editor.dsl.services.TextualScenarioGrammarAccess
import org.polarsys.capella.scenario.editor.dsl.textualScenario.Model
import org.polarsys.capella.scenario.editor.dsl.textualScenario.TextualScenarioPackage
import org.polarsys.capella.scenario.editor.dsl.textualScenario.Participant
import org.polarsys.capella.scenario.editor.dsl.textualScenario.Message

class TextualScenarioFormatter extends AbstractFormatter2 {
	
	@Inject extension TextualScenarioGrammarAccess

	def dispatch void format(Model model, extension IFormattableDocument document) {
		val begin = model.regionFor.feature(TextualScenarioPackage.Literals.MODEL__BEGIN)
		val end = model.regionFor.feature(TextualScenarioPackage.Literals.MODEL__END)
		begin.prepend[noSpace]
		begin.append[newLine]
		interior(begin, end)[indent]
		
		// call formatting function for each participant and message or references
		model.participants.forEach[ element | element.format ]
		model.messagesOrReferences.forEach[ element | element.format ]
	}

	def dispatch void format(Message message, extension IFormattableDocument document) {
		// each messages definition on a separate line
		message.regionFor.feature(TextualScenarioPackage.Literals.MESSAGE__NAME).append[newLine]
	}

	def dispatch void format(Participant participant, extension IFormattableDocument document) {
		// each participant definition on a separate line
		val p = participant.regionFor.feature(TextualScenarioPackage.Literals.PARTICIPANT__NAME)
		participant.regionFor.feature(TextualScenarioPackage.Literals.PARTICIPANT__NAME).append[newLine]
	}
}
