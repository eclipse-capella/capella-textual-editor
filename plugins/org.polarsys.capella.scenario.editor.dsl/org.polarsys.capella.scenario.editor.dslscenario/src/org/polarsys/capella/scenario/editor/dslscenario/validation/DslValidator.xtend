/*-------------------------------------------------------------------------------
* Copyright (c) 2020 THALES GLOBAL SERVICES.
*  
*  This program and the accompanying materials are made available under the
*   terms of the Eclipse Public License 2.0 which is available at
*   http://www.eclipse.org/legal/epl-2.0
*   
*   SPDX-License-Identifier: EPL-2.0
*   
*   Contributors:
*      Thales - initial API and implementation
*-------------------------------------------------------------------------------*/
/*
 * generated by Xtext 2.18.0.M3
 */
package org.polarsys.capella.scenario.editor.dslscenario.validation

import org.eclipse.xtext.validation.Check
import org.polarsys.capella.scenario.editor.dslscenario.dsl.DslPackage
import org.polarsys.capella.scenario.editor.helper.EmbeddedEditorInstanceHelper
import org.polarsys.capella.scenario.editor.dslscenario.dsl.Participant
import org.polarsys.capella.scenario.editor.dslscenario.dsl.Function
import org.polarsys.capella.scenario.editor.dslscenario.dsl.SequenceMessage
import org.polarsys.capella.scenario.editor.dslscenario.dsl.Model

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class DslValidator extends AbstractDslValidator {

	public static val INVALID_NAME = 'invalidName'
	public static val DUPILCATED_NAME = 'duplicatedName'

	@Check
	def checkPartExists(Participant participant) {
		if (!EmbeddedEditorInstanceHelper.getAvailablePartNames(participant.keyword).contains(participant.name)) {
			if (participant instanceof Function) {
				error('Function does not exist', DslPackage.Literals.PARTICIPANT__NAME, INVALID_NAME)
			} else {
				error('Represented part does not exist', DslPackage.Literals.PARTICIPANT__NAME, INVALID_NAME)
			}
		}
	}

	@Check
	def checkParticipantKeywordIsValid(Participant participant) {
		if (!EmbeddedEditorInstanceHelper.checkValidKeyword(participant.keyword)) {
			error('\'' + participant.keyword + '\' could not be used in this diagram',
				DslPackage.Literals.PARTICIPANT__KEYWORD)
		}
	}
	
	@Check
	def checkMessagesExist(SequenceMessage message) {
		if (!EmbeddedEditorInstanceHelper.getExchangeNames(message.getSource, message.getTarget).contains(message.name)) {
			error('Message does not exist', DslPackage.Literals.MESSAGE__NAME)
		}
	}
	
	@Check
	def checkDuplicatedParticipantsNames(Model model) {
		var index = 0
		val names = newHashSet
		for (p : model.participants) {
			if (!names.add(p.name + ":"+ p.id)) {
				error(
					'Multiple participants with the same name',
					DslPackage.Literals.MODEL__PARTICIPANTS,
					index,
					DUPILCATED_NAME
				)
			}
			index++
		}
	}
}
