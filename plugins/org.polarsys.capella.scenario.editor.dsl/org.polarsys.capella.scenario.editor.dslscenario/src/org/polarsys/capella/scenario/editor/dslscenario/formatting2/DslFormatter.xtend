/*-------------------------------------------------------------------------------
* Copyright (c) 2020 THALES GLOBAL SERVICES.
*  
*  This program and the accompanying materials are made available under the
*   terms of the Eclipse Public License 2.0 which is available at
*   http://www.eclipse.org/legal/epl-2.0
*   
*   SPDX-License-Identifier: EPL-2.0
*   
*   Contributors:
*      Thales - initial API and implementation
*-------------------------------------------------------------------------------*/
/*
 * generated by Xtext 2.18.0.M3
 */
package org.polarsys.capella.scenario.editor.dslscenario.formatting2

import com.google.inject.Inject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.polarsys.capella.scenario.editor.dslscenario.dsl.Model
import org.polarsys.capella.scenario.editor.dslscenario.services.DslGrammarAccess
import org.polarsys.capella.scenario.editor.dslscenario.dsl.Participant
import org.polarsys.capella.scenario.editor.dslscenario.dsl.DslPackage
import org.polarsys.capella.scenario.editor.dslscenario.dsl.Message

class DslFormatter extends AbstractFormatter2 {
	
	@Inject extension DslGrammarAccess

	def dispatch void format(Model model, extension IFormattableDocument document) {
		val begin = model.regionFor.feature(DslPackage.Literals.MODEL__BEGIN)
		val end = model.regionFor.feature(DslPackage.Literals.MODEL__END)
		begin.prepend[noSpace]
		begin.append[newLine]
		interior(begin, end)[indent]
		
		// call formatting function for each participant and message or references
		model.participants.forEach[ element | element.format ]
		model.messagesOrReferences.forEach[ element | element.format ]
	}

	def dispatch void format(Message message, extension IFormattableDocument document) {
		// each messages definition on a separate line
		message.regionFor.feature(DslPackage.Literals.MESSAGE__NAME).append[newLine]
	}

	def dispatch void format(Participant participant, extension IFormattableDocument document) {
		// each participant definition on a separate line
		val p = participant.regionFor.feature(DslPackage.Literals.PARTICIPANT__NAME)
		participant.regionFor.feature(DslPackage.Literals.PARTICIPANT__NAME).append[newLine]
	}
}
