/*
 * generated by Xtext 2.18.0.M3
 */
package org.polarsys.capella.scenario.editor.dslscenario.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.polarsys.capella.scenario.editor.dslscenario.dsl.Activity;
import org.polarsys.capella.scenario.editor.dslscenario.dsl.Actor;
import org.polarsys.capella.scenario.editor.dslscenario.dsl.ArmTimerMessage;
import org.polarsys.capella.scenario.editor.dslscenario.dsl.Component;
import org.polarsys.capella.scenario.editor.dslscenario.dsl.ConfigurationItem;
import org.polarsys.capella.scenario.editor.dslscenario.dsl.CreateMessage;
import org.polarsys.capella.scenario.editor.dslscenario.dsl.DeleteMessage;
import org.polarsys.capella.scenario.editor.dslscenario.dsl.DslPackage;
import org.polarsys.capella.scenario.editor.dslscenario.dsl.Entity;
import org.polarsys.capella.scenario.editor.dslscenario.dsl.Function;
import org.polarsys.capella.scenario.editor.dslscenario.dsl.Message;
import org.polarsys.capella.scenario.editor.dslscenario.dsl.Model;
import org.polarsys.capella.scenario.editor.dslscenario.dsl.Participant;
import org.polarsys.capella.scenario.editor.dslscenario.dsl.ParticipantDeactivation;
import org.polarsys.capella.scenario.editor.dslscenario.dsl.Reference;
import org.polarsys.capella.scenario.editor.dslscenario.dsl.ReturnMessage;
import org.polarsys.capella.scenario.editor.dslscenario.dsl.Role;
import org.polarsys.capella.scenario.editor.dslscenario.dsl.SequenceMessage;
import org.polarsys.capella.scenario.editor.dslscenario.services.DslGrammarAccess;

@SuppressWarnings("all")
public class DslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DslPackage.ACTIVITY:
				sequence_Activity(context, (Activity) semanticObject); 
				return; 
			case DslPackage.ACTOR:
				sequence_Actor(context, (Actor) semanticObject); 
				return; 
			case DslPackage.ARM_TIMER_MESSAGE:
				sequence_ArmTimerMessage(context, (ArmTimerMessage) semanticObject); 
				return; 
			case DslPackage.COMPONENT:
				sequence_Component(context, (Component) semanticObject); 
				return; 
			case DslPackage.CONFIGURATION_ITEM:
				sequence_ConfigurationItem(context, (ConfigurationItem) semanticObject); 
				return; 
			case DslPackage.CREATE_MESSAGE:
				if (rule == grammarAccess.getCreateMessageRule()) {
					sequence_CreateMessage(context, (CreateMessage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMessageRule()
						|| rule == grammarAccess.getSequenceMessageTypeRule()) {
					sequence_CreateMessage_SequenceMessageType(context, (CreateMessage) semanticObject); 
					return; 
				}
				else break;
			case DslPackage.DELETE_MESSAGE:
				if (rule == grammarAccess.getDeleteMessageRule()) {
					sequence_DeleteMessage(context, (DeleteMessage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMessageRule()
						|| rule == grammarAccess.getSequenceMessageTypeRule()) {
					sequence_DeleteMessage_SequenceMessageType(context, (DeleteMessage) semanticObject); 
					return; 
				}
				else break;
			case DslPackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case DslPackage.FUNCTION:
				sequence_Function(context, (Function) semanticObject); 
				return; 
			case DslPackage.MESSAGE:
				sequence_MessageUncalled(context, (Message) semanticObject); 
				return; 
			case DslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case DslPackage.PARTICIPANT:
				sequence_ParticipantUncalled(context, (Participant) semanticObject); 
				return; 
			case DslPackage.PARTICIPANT_DEACTIVATION:
				sequence_ParticipantDeactivation(context, (ParticipantDeactivation) semanticObject); 
				return; 
			case DslPackage.REFERENCE:
				sequence_Reference(context, (Reference) semanticObject); 
				return; 
			case DslPackage.RETURN_MESSAGE:
				sequence_ReturnMessage(context, (ReturnMessage) semanticObject); 
				return; 
			case DslPackage.ROLE:
				sequence_Role(context, (Role) semanticObject); 
				return; 
			case DslPackage.SEQUENCE_MESSAGE:
				if (rule == grammarAccess.getSequenceMessageRule()) {
					sequence_SequenceMessage(context, (SequenceMessage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMessageRule()
						|| rule == grammarAccess.getSequenceMessageTypeRule()) {
					sequence_SequenceMessage_SequenceMessageType(context, (SequenceMessage) semanticObject); 
					return; 
				}
				else break;
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Participant returns Activity
	 *     GenericFunction returns Activity
	 *     Activity returns Activity
	 *
	 * Constraint:
	 *     (keyword='activity' name=STRING)
	 */
	protected void sequence_Activity(ISerializationContext context, Activity semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PARTICIPANT__KEYWORD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PARTICIPANT__KEYWORD));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PARTICIPANT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PARTICIPANT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getActivityAccess().getKeywordActivityKeyword_0_0(), semanticObject.getKeyword());
		feeder.accept(grammarAccess.getActivityAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Participant returns Actor
	 *     GenericComponent returns Actor
	 *     Actor returns Actor
	 *
	 * Constraint:
	 *     (keyword='actor' name=STRING)
	 */
	protected void sequence_Actor(ISerializationContext context, Actor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PARTICIPANT__KEYWORD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PARTICIPANT__KEYWORD));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PARTICIPANT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PARTICIPANT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getActorAccess().getKeywordActorKeyword_0_0(), semanticObject.getKeyword());
		feeder.accept(grammarAccess.getActorAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Message returns ArmTimerMessage
	 *     ArmTimerMessage returns ArmTimerMessage
	 *
	 * Constraint:
	 *     (participant=STRING name=STRING)
	 */
	protected void sequence_ArmTimerMessage(ISerializationContext context, ArmTimerMessage semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ARM_TIMER_MESSAGE__PARTICIPANT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ARM_TIMER_MESSAGE__PARTICIPANT));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MESSAGE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MESSAGE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getArmTimerMessageAccess().getParticipantSTRINGTerminalRuleCall_1_0(), semanticObject.getParticipant());
		feeder.accept(grammarAccess.getArmTimerMessageAccess().getNameSTRINGTerminalRuleCall_3_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Participant returns Component
	 *     GenericComponent returns Component
	 *     Component returns Component
	 *
	 * Constraint:
	 *     (keyword='component' name=STRING (nature='unset' | nature='behavior' | nature='node')?)
	 */
	protected void sequence_Component(ISerializationContext context, Component semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Participant returns ConfigurationItem
	 *     GenericComponent returns ConfigurationItem
	 *     ConfigurationItem returns ConfigurationItem
	 *
	 * Constraint:
	 *     (keyword='configuration_item' name=STRING)
	 */
	protected void sequence_ConfigurationItem(ISerializationContext context, ConfigurationItem semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PARTICIPANT__KEYWORD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PARTICIPANT__KEYWORD));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PARTICIPANT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PARTICIPANT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConfigurationItemAccess().getKeywordConfiguration_itemKeyword_0_0(), semanticObject.getKeyword());
		feeder.accept(grammarAccess.getConfigurationItemAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CreateMessage returns CreateMessage
	 *
	 * Constraint:
	 *     (source=STRING target=STRING name=STRING)
	 */
	protected void sequence_CreateMessage(ISerializationContext context, CreateMessage semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SEQUENCE_MESSAGE_TYPE__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SEQUENCE_MESSAGE_TYPE__SOURCE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SEQUENCE_MESSAGE_TYPE__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SEQUENCE_MESSAGE_TYPE__TARGET));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MESSAGE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MESSAGE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCreateMessageAccess().getSourceSTRINGTerminalRuleCall_0_0(), semanticObject.getSource());
		feeder.accept(grammarAccess.getCreateMessageAccess().getTargetSTRINGTerminalRuleCall_2_0(), semanticObject.getTarget());
		feeder.accept(grammarAccess.getCreateMessageAccess().getNameSTRINGTerminalRuleCall_4_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Message returns CreateMessage
	 *     SequenceMessageType returns CreateMessage
	 *
	 * Constraint:
	 *     (source=STRING target=STRING name=STRING return=ReturnMessage?)
	 */
	protected void sequence_CreateMessage_SequenceMessageType(ISerializationContext context, CreateMessage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DeleteMessage returns DeleteMessage
	 *
	 * Constraint:
	 *     (source=STRING target=STRING name=STRING)
	 */
	protected void sequence_DeleteMessage(ISerializationContext context, DeleteMessage semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SEQUENCE_MESSAGE_TYPE__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SEQUENCE_MESSAGE_TYPE__SOURCE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SEQUENCE_MESSAGE_TYPE__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SEQUENCE_MESSAGE_TYPE__TARGET));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MESSAGE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MESSAGE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDeleteMessageAccess().getSourceSTRINGTerminalRuleCall_0_0(), semanticObject.getSource());
		feeder.accept(grammarAccess.getDeleteMessageAccess().getTargetSTRINGTerminalRuleCall_2_0(), semanticObject.getTarget());
		feeder.accept(grammarAccess.getDeleteMessageAccess().getNameSTRINGTerminalRuleCall_4_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Message returns DeleteMessage
	 *     SequenceMessageType returns DeleteMessage
	 *
	 * Constraint:
	 *     (source=STRING target=STRING name=STRING return=ReturnMessage?)
	 */
	protected void sequence_DeleteMessage_SequenceMessageType(ISerializationContext context, DeleteMessage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Participant returns Entity
	 *     GenericComponent returns Entity
	 *     Entity returns Entity
	 *
	 * Constraint:
	 *     (keyword='entity' name=STRING)
	 */
	protected void sequence_Entity(ISerializationContext context, Entity semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PARTICIPANT__KEYWORD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PARTICIPANT__KEYWORD));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PARTICIPANT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PARTICIPANT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEntityAccess().getKeywordEntityKeyword_0_0(), semanticObject.getKeyword());
		feeder.accept(grammarAccess.getEntityAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Participant returns Function
	 *     GenericFunction returns Function
	 *     Function returns Function
	 *
	 * Constraint:
	 *     (keyword='function' name=STRING)
	 */
	protected void sequence_Function(ISerializationContext context, Function semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PARTICIPANT__KEYWORD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PARTICIPANT__KEYWORD));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PARTICIPANT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PARTICIPANT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFunctionAccess().getKeywordFunctionKeyword_0_0(), semanticObject.getKeyword());
		feeder.accept(grammarAccess.getFunctionAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MessageUncalled returns Message
	 *
	 * Constraint:
	 *     id=ID
	 */
	protected void sequence_MessageUncalled(ISerializationContext context, Message semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MESSAGE__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MESSAGE__ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMessageUncalledAccess().getIdIDTerminalRuleCall_0(), semanticObject.getId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (begin='{' participants+=Participant* (messagesOrReferences+=Message | messagesOrReferences+=Reference)* end='}')
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Message returns ParticipantDeactivation
	 *     ParticipantDeactivation returns ParticipantDeactivation
	 *
	 * Constraint:
	 *     (keyword='deactivate' name=STRING)
	 */
	protected void sequence_ParticipantDeactivation(ISerializationContext context, ParticipantDeactivation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PARTICIPANT_DEACTIVATION__KEYWORD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PARTICIPANT_DEACTIVATION__KEYWORD));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MESSAGE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MESSAGE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParticipantDeactivationAccess().getKeywordDeactivateKeyword_0_0(), semanticObject.getKeyword());
		feeder.accept(grammarAccess.getParticipantDeactivationAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ParticipantUncalled returns Participant
	 *
	 * Constraint:
	 *     id=ID
	 */
	protected void sequence_ParticipantUncalled(ISerializationContext context, Participant semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PARTICIPANT__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PARTICIPANT__ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParticipantUncalledAccess().getIdIDTerminalRuleCall_0(), semanticObject.getId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Reference returns Reference
	 *
	 * Constraint:
	 *     (keyword='ref' timelines+=STRING+ name=STRING)
	 */
	protected void sequence_Reference(ISerializationContext context, Reference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReturnMessage returns ReturnMessage
	 *
	 * Constraint:
	 *     (target=STRING source=STRING name=STRING)
	 */
	protected void sequence_ReturnMessage(ISerializationContext context, ReturnMessage semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.RETURN_MESSAGE__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.RETURN_MESSAGE__TARGET));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.RETURN_MESSAGE__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.RETURN_MESSAGE__SOURCE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.RETURN_MESSAGE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.RETURN_MESSAGE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReturnMessageAccess().getTargetSTRINGTerminalRuleCall_0_0(), semanticObject.getTarget());
		feeder.accept(grammarAccess.getReturnMessageAccess().getSourceSTRINGTerminalRuleCall_2_0(), semanticObject.getSource());
		feeder.accept(grammarAccess.getReturnMessageAccess().getNameSTRINGTerminalRuleCall_4_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Participant returns Role
	 *     GenericComponent returns Role
	 *     Role returns Role
	 *
	 * Constraint:
	 *     (keyword='role' name=STRING)
	 */
	protected void sequence_Role(ISerializationContext context, Role semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PARTICIPANT__KEYWORD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PARTICIPANT__KEYWORD));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PARTICIPANT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PARTICIPANT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRoleAccess().getKeywordRoleKeyword_0_0(), semanticObject.getKeyword());
		feeder.accept(grammarAccess.getRoleAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SequenceMessage returns SequenceMessage
	 *
	 * Constraint:
	 *     (source=STRING target=STRING execution='withExecution'? name=STRING)
	 */
	protected void sequence_SequenceMessage(ISerializationContext context, SequenceMessage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Message returns SequenceMessage
	 *     SequenceMessageType returns SequenceMessage
	 *
	 * Constraint:
	 *     (source=STRING target=STRING execution='withExecution'? name=STRING return=ReturnMessage?)
	 */
	protected void sequence_SequenceMessage_SequenceMessageType(ISerializationContext context, SequenceMessage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
